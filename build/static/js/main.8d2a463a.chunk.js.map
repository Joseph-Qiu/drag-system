{"version":3,"sources":["components/header/index.tsx","store/applicationStore.tsx","store/index.tsx","components/box/index.tsx","components/card/index.tsx","design/components/carousel/index.tsx","design/components/nav/index.tsx","design/design-component-map.ts","components/page-container/index.tsx","design/design-config.ts","components/content/index.tsx","components/layout/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","ApplicationStore","item","this","designList","push","observable","action","storesContext","React","createContext","applicationContext","useStores","useContext","observer","props","sourceDesignList","toJS","name","desc","box","type","useDrag","begin","monitor","find","belong","updateDesignList","end","uselessIndex","findIndex","didDrop","splice","getItem","drag","ref","title","Card","useRef","useDrop","accept","hover","collect","isOver","canDrop","drop","children","BaseCarousel","useState","data","imgHeight","soruceData","map","val","key","href","style","display","width","height","src","alt","verticalAlign","Array","from","_val","i","icon","text","designComponentMap","Carousel","activeStyle","PartCpm","idx","Component","renderCop","config","category","thumbnail","designConfig","Layout","App","DndProvider","backend","HTMLBackend","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d2a463a.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nconst Header:React.FC = () =>  {\n  return (\n    <div className=\"sys-header\">\n    </div>\n  );\n}\n\nexport default Header","import { observable, action } from 'mobx'\ninterface nodeProps {\n  name: string, // 组件名称\n  type: string, // 组件类型\n  belong: string | number, // 组件唯一标识\n  // 物料私有属性，可添加特有属性\n  attrs?: {},\n  // 业务组件保存的数据\n  dataContext?:{}\n}\nexport class ApplicationStore {\n  @observable\n  designList:Array<nodeProps> = []\n\n  @action\n  increment(item:nodeProps) {\n    this.designList.push(item) \n  }\n\n  // 增量更新\n  @action\n  updateDesignList(item:Array<nodeProps>) {\n    this.designList = item\n  }\n\n}","import React from 'react';\nimport {ApplicationStore} from 'store/applicationStore'\n\nexport const storesContext = React.createContext({\n  applicationContext: new ApplicationStore(),\n})\n\nexport const useStores = () => React.useContext(storesContext)","import React from 'react';\nimport { toJS} from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport { DragSourceMonitor,useDrag } from 'react-dnd'\nimport { useStores } from 'store'\nimport { Card } from 'antd';\nimport './index.scss';\ninterface BoxValue {\n  belong: string;\n  name: string;\n  desc?: string;\n  category: string;\n  thumbnail: string;\n}\n\nconst Box:React.FC<BoxValue> = (props) =>  {\n const { applicationContext,applicationContext:{designList} } = useStores()\n const sourceDesignList = toJS(designList)\n  const {name,desc} = props\n  const box = {\n    ...props,\n    type: 'Card',\n};\n  const [, drag] = useDrag({\n    item: box,\n    begin(monitor: DragSourceMonitor) {\n      const useless = sourceDesignList.find((item) => item.belong === -1);\n       // 拖拽开始时，向 cardList 数据源中插入一个占位的元素，如果占位元素已经存在，不再重复插入\n       if(!useless){\n          applicationContext.updateDesignList([...sourceDesignList,{ type: \"part\", name: '放这里', belong: -1 }])\n       }\n  },\n  // 拖拽结束\n    end:(item,monitor: DragSourceMonitor)=>{\n      const uselessIndex = sourceDesignList.findIndex((item) => item.belong === -1);\n      // 当目标处于目标元素时\n      if (monitor.didDrop()) {\n          // 插入数据源\n           sourceDesignList.splice(uselessIndex, 1, { ...monitor.getItem()});\n      } else {\n          sourceDesignList.splice(uselessIndex, 1);\n      }\n          applicationContext.updateDesignList(sourceDesignList)\n    }\n});\n  return (\n    <div className=\"sys-box\" ref={drag}>\n      <Card title={name}>\n          {desc}\n       </Card>\n    </div>\n  );\n}\n\nexport default observer(Box)","import React,{useRef} from 'react';\nimport { useDrop,DragSourceMonitor,DropTargetMonitor } from 'react-dnd'\nimport './index.scss';\n\ninterface CardValue {\n  cmpSource?: React.ReactNode;\n}\n\nconst Card:React.FC<CardValue> = (props) =>  {\n  const ref = useRef<HTMLDivElement>(null);\n  const [{isOver,canDrop}, drop ] = useDrop({\n    accept: 'Card',\n    hover(item,monitor){\n     \n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    })\n  });\n  //console.log(isOver)\n  //console.log(canDrop)\n  drop(ref)\n  return (\n    <div ref={ ref } className=\"sys-card\">\n       {props.children}\n    </div>\n  );\n}\n\nexport default Card","import React,{useState} from 'react';\nimport { Carousel } from 'antd-mobile';\nconst BaseCarousel = ()=>{\n  const [soruceData] = useState({\n    data: ['AiyWuByWklrrUDlFignR', 'TekJlZRVCjLFexlOCuWn', 'IJOtIlfsYdTyaDTRVrLI'],\n    imgHeight: 176,\n  });\n  return (\n    <Carousel>\n      {soruceData.data.map(val => (\n            <a\n              key={val}\n              href=\"http://www.alipay.com\"\n              style={{ display: 'inline-block', width: '100%', height: 176 }}\n            >\n              <img\n                src={`https://zos.alipayobjects.com/rmsportal/${val}.png`}\n                alt=\"\"\n                style={{ width: '100%', verticalAlign: 'top' }}\n              />\n            </a>\n          ))}\n    </Carousel>\n  );\n}\n\nexport default BaseCarousel","import React from 'react';\nimport { Grid } from 'antd-mobile';\n\nconst data = Array.from(new Array(9)).map((_val, i) => ({\n  icon: 'https://gw.alipayobjects.com/zos/rmsportal/nywPmnTAvTmLusPxHPSu.png',\n  text: `name${i}`,\n}));\nconst Nav = ()=>{\n  return (\n    <Grid data={data} activeStyle={false} />\n  );\n}\n\nexport default Nav","import Carousel from 'design/components/carousel'\nimport Nav from 'design/components/nav'\n\ninterface Config {\n  [propName: string]: React.ReactNode;\n}\n\nconst designComponentMap:Config= {\n  'design/carousel': Carousel,\n  'design/nav': Nav,\n}\n\nexport default designComponentMap \n","import React from 'react';\nimport { toJS} from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport { useDrop } from 'react-dnd'\nimport Card from 'components/card'\nimport designComponentMap from 'design/design-component-map'\nimport { useStores } from 'store'\nimport './index.scss';\n\nconst PartCpm = ()=>{\n  return <div className=\"sys-placeholder\">添加至此处</div>\n}\n\nconst PageContainer:React.FC = ()=>{\n  const { applicationContext:{designList} } = useStores()\n  const sourceDesignList = toJS(designList)\n  // 让容器成为放置目标源\n  const [, drop ] = useDrop({\n    accept: 'Card'\n  });\n\n  function renderCop(item:any){\n    const Component:any = designComponentMap[item.belong]\n    return item.belong !==-1 ? <Component /> : <PartCpm />\n  }\n\n  return (\n    <div ref={ drop } className=\"sys-page-container\">\n        {\n          sourceDesignList.map((item,idx)=>{\n            return <Card key={idx} >{renderCop(item)}</Card>\n          })\n        }\n    </div>\n  );\n}\n\nexport default observer(PageContainer)","const config = [\n  {\n    belong:\"design/carousel\",\n    name: \"走马灯\",\n    desc: \"走马灯\",\n    category: \"official\",\n    thumbnail: \"/assets/images/default.png\"\n  },\n  {\n    belong:\"design/nav\",\n    name: \"九宫格导航\",\n    desc: \"九宫格导航\",\n    category: \"official\",\n    thumbnail: \"/assets/images/default.png\"\n  }\n]\n\nexport default config","import React from 'react';\nimport Box from 'components/box'\nimport PageContainer from 'components/page-container'\nimport designConfig from 'design/design-config';\n\nimport { observer } from 'mobx-react-lite'\nimport './index.scss';\n\nconst Content:React.FC = () => {\n  \n  function renderLeft(){\n    return designConfig.map((item)=>{\n      return <Box key={item.belong} {...item}/>\n    })\n  }\n  return (\n    <div className=\"sys-content\">\n      <div className=\"sys-left\">\n          {\n            renderLeft()\n          }\n      </div>\n      <PageContainer />\n    </div>\n  );\n}\n\nexport default observer(Content)\n","import React from 'react';\nimport Header from 'components/header'\nimport Content from 'components/content'\nimport './index.scss';\nconst Layout = () => {\n  return (\n    <div className=\"sys-layout\">\n      <Header/>\n      <Content />\n    </div>\n  );\n}\nexport default Layout\n\n","import React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport HTMLBackend from 'react-dnd-html5-backend';\nimport Layout from 'components/layout'\nimport 'styles/app.scss';\n\nfunction App() {\n  return (\n      <DndProvider backend={HTMLBackend}>\n        <Layout />\n      </DndProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}